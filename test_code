
class Number:
    def __init__(self, num):
        self.num = num

    def __str__(self):
        return str(self.num)

    def __add__(self, other):
        return Number(self.num + other.num)

    def __sub__(self, other):
        return Number(self.num - other.num)

    def __mul__(self, other):
        return Number(self.num * other.num)

    def __truediv__(self, other):
        if other.num == 0:
            raise ValueError("Division by zero is not allowed")
        return Number(self.num // other.num)

def parse_expression(expression):
    def get_number(index):
        number = 0
        while index < len(expression) and expression[index].isdigit():
            number = number * 10 + int(expression[index])
            index += 1
        return Number(number), index

    def parse(index=0, min_op_priority=1):
        operations = {'+': 1, '-': 1, '*': 2, '/': 2}
        current_op_priority = {'+': 1, '-': 1, '*': 2, '/': 2}
        num_operators = {1: Number.__add__, 2: Number.__sub__, 3: Number.__mul__, 4: Number.__truediv__}
        
        if index < len(expression) and expression[index] == '(':
            num, index = parse(index + 1, 1)
            index += 1  # skip the closing ')'

        else:
            num, index = get_number(index)

        result = num

        while index < len(expression) and expression[index] in operations:
            op = expression[index]
            op_priority = operations[op]
            if op_priority < min_op_priority:
                break

            index += 1  # move past the operator
            if op in ('+', '-'):
                num, index = parse(index, op_priority + 1)
            else:
                num, index = parse(index, op_priority)

            if op == '+':
                result = result + num
            elif op == '-':
                result = result - num
            elif op == '*':
                result = result * num
            elif op == '/':
                result = result / num

        return result, index

    result, _ = parse()
    return result

if __name__ == "__main__":
    try:
        expression = input("Enter a complex expression (e.g., '(30 + 20 * 5) / 125'): ")
        result = parse_expression(expression.replace(' ', ''))
        print(f"Result: {result}")
    except Exception as e:
        print(f"Error: {e}")
